package simpledb;

import java.util.*;
import java.io.*;

/**
 * Each instance of HeapPage stores data for one page of HeapFiles and 
 * implements the Page interface that is used by BufferPool.
 *
 * @see HeapFile
 * @see BufferPool
 *
 */
public class HeapPage implements Page {

    final HeapPageId pid;
    final TupleDesc td;
    final byte header[];
    final Tuple tuples[];
    final int numSlots;
    
    TransactionId dirtyTid;

    byte[] oldData;
    private final Byte oldDataLock=new Byte((byte)0);
    

    /**
     * Create a HeapPage from a set of bytes of data read from disk.
     * The format of a HeapPage is a set of header bytes indicating
     * the slots of the page that are in use, some number of tuple slots.
     *  Specifically, the number of tuples is equal to: <p>
     *          floor((BufferPool.getPageSize()*8) / (tuple size * 8 + 1))
     * <p> where tuple size is the size of tuples in this
     * database table, which can be determined via {@link Catalog#getTupleDesc}.
     * The number of 8-bit header words is equal to:
     * <p>
     *      ceiling(no. tuple slots / 8)
     * <p>
     * @see Database#getCatalog
     * @see Catalog#getTupleDesc
     * @see BufferPool#getPageSize()
     */
    public HeapPage(HeapPageId id, byte[] data) throws IOException {
    	dirtyTid = null;
        this.pid = id;
        this.td = Database.getCatalog().getTupleDesc(id.getTableId());
        this.numSlots = getNumTuples();
        DataInputStream dis = new DataInputStream(new ByteArrayInputStream(data));

        // allocate and read the header slots of this page
        header = new byte[getHeaderSize()];
        for (int i=0; i<header.length; i++)
            header[i] = dis.readByte();
        
        tuples = new Tuple[numSlots];
        try{
            // allocate and read the actual records of this page
            for (int i=0; i<tuples.length; i++) 
                tuples[i] = readNextTuple(dis,i);
        }catch(NoSuchElementException e){
            e.printStackTrace();
        }
        dis.close();

        setBeforeImage();
    }

    /** Retrieve the number of tuples on this page.
        @return the number of tuples on this page
    */
    private int getNumTuples() {        
    	int pageSize = BufferPool.getPageSize();
    	int tupleSize = td.getSize();
        return (int) Math.floor(pageSize * 8.0 / (tupleSize * 8 + 1));

    }

    /**
     * Computes the number of bytes in the header of a page in a HeapFile with each tuple occupying tupleSize bytes
     * @return the number of bytes in the header of a page in a HeapFile with each tuple occupying tupleSize bytes
     */
    private int getHeaderSize() {        
        return (int) Math.ceil(getNumTuples() / 8.0);
                 
    }
    
    /** Return a view of this page before it was modified
        -- used by recovery */
    public HeapPage getBeforeImage(){
        try {
            byte[] oldDataRef = null;
            synchronized(oldDataLock)
            {
                oldDataRef = oldData;
            }
            return new HeapPage(pid,oldDataRef);
        } catch (IOException e) {
            e.printStackTrace();
            //should never happen -- we parsed it OK before!
            System.exit(1);
        }
        return null;
    }
    
    public void setBeforeImage() {
        synchronized(oldDataLock)
        {
        oldData = getPageData().clone();
        }
    }

    /**
     * @return the PageId associated with this page.
     */
    public HeapPageId getId() {
    	return pid;
    }

    /**
     * Suck up tuples from the source file.
     */
    private Tuple readNextTuple(DataInputStream dis, int slotId) throws NoSuchElementException {
        // if associated bit is not set, read forward to the next tuple, and
        // return null.
        if (!isSlotUsed(slotId)) {
            for (int i=0; i<td.getSize(); i++) {
                try {
                    dis.readByte();
                } catch (IOException e) {
                    throw new NoSuchElementException("error reading empty tuple");
                }
            }
            return null;
        }

        // read fields in the tuple
        Tuple t = new Tuple(td);
        RecordId rid = new RecordId(pid, slotId);
        t.setRecordId(rid);
        try {
            for (int j=0; j<td.numFields(); j++) {
                Field f = td.getFieldType(j).parse(dis);
                t.setField(j, f);
            }
        } catch (java.text.ParseException e) {
            e.printStackTrace();
            throw new NoSuchElementException("parsing error!");
        }

        return t;
    }

    /**
     * Generates a byte array representing the contents of this page.
     * Used to serialize this page to disk.
     * <p>
     * The invariant here is that it should be possible to pass the byte
     * array generated by getPageData to the HeapPage constructor and
     * have it produce an identical HeapPage object.
     *
     * @see #HeapPage
     * @return A byte array correspond to the bytes of this page.
     */
    public byte[] getPageData() {
        int len = BufferPool.getPageSize();
        ByteArrayOutputStream baos = new ByteArrayOutputStream(len);
        DataOutputStream dos = new DataOutputStream(baos);

        // create the header of the page
        for (int i=0; i<header.length; i++) {
            try {
                dos.writeByte(header[i]);
            } catch (IOException e) {
                // this really shouldn't happen
                e.printStackTrace();
            }
        }

        // create the tuples
        for (int i=0; i<tuples.length; i++) {

            // empty slot
            if (!isSlotUsed(i)) {
                for (int j=0; j<td.getSize(); j++) {
                    try {
                        dos.writeByte(0);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }

                }
                continue;
            }

            // non-empty slot
            for (int j=0; j<td.numFields(); j++) {
                Field f = tuples[i].getField(j);
                try {
                    f.serialize(dos);
                
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

        // padding
        int zerolen = BufferPool.getPageSize() - (header.length + td.getSize() * tuples.length); //- numSlots * td.getSize();
        
        byte[] zeroes = new byte[zerolen];
        try {
            dos.write(zeroes, 0, zerolen);
        } catch (IOException e) {
            e.printStackTrace();
        }

        try {
            dos.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }

        return baos.toByteArray();
    }

    /**
     * Static method to generate a byte array corresponding to an empty
     * HeapPage.
     * Used to add new, empty pages to the file. Passing the results of
     * this method to the HeapPage constructor will create a HeapPage with
     * no valid tuples in it.
     *
     * @return The returned ByteArray.
     */
    public static byte[] createEmptyPageData() {
        int len = BufferPool.getPageSize();
        return new byte[len]; //all 0
    }

    /**
     * Delete the specified tuple from the page;  the tuple should be updated to reflect
     *   that it is no longer stored on any page.
     * @throws DbException if this tuple is not on this page, or tuple slot is
     *         already empty.
     * @param t The tuple to delete
     */
    public void deleteTuple(Tuple t) throws DbException {
    	RecordId rid = t.getRecordId();
    	int slotId = rid.tupleNumber;
    	PageId newPid = rid.pageId;
    	if (!pid.equals(newPid) || !isSlotUsed(slotId)) {
    		throw new DbException("passed-in tuple is not in this page");
    	}
    	markSlotUsed(slotId, false);
    }
    
    /**
     * private method used to convert a string with length 8, which contains all numbers, 0 or 1, to byte
     * @param newbitsArrayString the passed-in string
     * @return the correspongding byte
     */
    private byte convertBitArrayStringToByte(String newbitsArrayString) {
    	int sum = 0;
    	if (newbitsArrayString.substring(0, 1).equals("1")) {
    		sum -= 128;
    	}
    	for (int i = 1; i < 8; i++) {
    		sum += Integer.parseInt(newbitsArrayString.substring(i, i+ 1)) * ((int) Math.pow(2, 7 - i));
    	}
    	
    	return (byte) sum;
    }

    /**
     * Adds the specified tuple to the page;  the tuple should be updated to reflect
     *  that it is now stored on this page.
     * @throws DbException if the page is full (no empty slots) or tupledesc
     *         is mismatch.
     * @param t The tuple to add.
     */
    public void insertTuple(Tuple t) throws DbException {
    	if (getNumEmptySlots() == 0 || !t.getTupleDesc().equals(td)) {
    		throw new DbException("no more space to insert this tuple or the passed-in tuple has different tupleDesc");
    	} 
    	
    	for (int i = 0; i < numSlots; i++) {
    		if (!isSlotUsed(i)) {
    			markSlotUsed(i, true);
    			tuples[i] = t;
    			RecordId newRecordId = new RecordId(pid, i);
    			t.recordId = newRecordId;
    			break;
    		}
    	}
    }

    /**
     * Marks this page as dirty/not dirty and record that transaction
     * that did the dirtying
     */
    public void markDirty(boolean dirty, TransactionId tid) {
    	if (dirty) {
    		dirtyTid = tid;
    	} else {
    		dirtyTid = null;
    	}
    }

    /**
     * Returns the tid of the transaction that last dirtied this page, or null if the page is not dirty
     */
    public TransactionId isDirty() {
        return dirtyTid;      
    }

    /**
     * Returns the number of empty slots on this page.
     */
    public int getNumEmptySlots() {
        int numValidSlots = 0;
        for (int i = 0; i < header.length; i++) {
        	String bits = transferToBitString(header[i]);
        	numValidSlots += countOnes(bits);
        }
        return numSlots - numValidSlots;
    }
    
    /**
     * helper method that used to find the number of ones in the bit array string
     * @param bits the bits array string we want to count the ones from
     * @return number of ones in the bit string array
     */
    private int countOnes(String bits) {
    	int ones = 0;
    	for (int i = 0; i < bits.length(); i++) {
    		if (bits.substring(i, i + 1).equals("1")) {
    			ones++;
    		}
    	}
    	return ones;
    }
    
    /**
     * helper method that transfer a byte to bit string of size 8
     * @param b given byte that we want to transfer to bit array
     * @return transfered bit array string
     */
    private String transferToBitString(byte b) {
    	int b1 = (int) b;
    	String result = "";
    	String firstBit = "";
    	if (b1 >= 0) {
    		firstBit = "0";
    	} else {
    		b1 += 128; //2^7 = 128
    		firstBit = "1";
    	}
    	
    	while (b1 > 0) {
    		int r = b1 % 2;
    		result = r + result;
    		b1 = (b1 - r) / 2;
    	}
    	
    	while (result.length() < 7) {
    		result = "0" + result;
    	}
    	
    	return firstBit + result;
    }
    
    /**
     * Returns true if associated slot on this page is filled.
     */
    public boolean isSlotUsed(int i) {
    	int byteIndex = i / 8;
    	String bitsArrayString = transferToBitString(header[byteIndex]);
    	
    	if (bitsArrayString.substring(7 - (i - byteIndex * 8), 8 - (i - byteIndex * 8)).equals("1")) {
    		return true;
    	} else {
    		return false;
    	}
    }

    /**
     * Abstraction to fill or clear a slot on this page.
     */
    private void markSlotUsed(int i, boolean value) {
    	int byteIndex = i / 8;
    	String bitsArrayString = transferToBitString(header[byteIndex]);
    	String used = "";
    	if (value == true) {
    		used += "1";
    	} else {
    		used += "0";
    	}
    	String newbitsArrayString = bitsArrayString.substring(0, 7 - (i - byteIndex * 8)) + used + bitsArrayString.substring(8 - (i - byteIndex * 8), 8);
    	
    	header[byteIndex] = convertBitArrayStringToByte(newbitsArrayString);
    }

    /**
     * @return an iterator over all tuples on this page (calling remove on this iterator throws an UnsupportedOperationException)
     * (note that this iterator shouldn't return tuples in empty slots!)
     */
    public Iterator<Tuple> iterator() {
        ArrayList<Tuple> tupleArrayList = new ArrayList<Tuple>();
        for (int i = 0; i < tuples.length; i++) {
        	if (isSlotUsed(i)) {
        		tupleArrayList.add(tuples[i]);
        	}
        }
        return tupleArrayList.iterator();
    }

}

